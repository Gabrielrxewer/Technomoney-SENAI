class RateLimiterMemory {
  constructor(options = {}) {
    this.options = options;
    this.points = options.points || 1;
    this.store = new Map();
  }
  async consume(key, points = 1) {
    const current = this.store.get(key) || 0;
    if (current + points > this.points) {
      const error = new Error("Too Many Requests");
      error.msBeforeNext = 0;
      throw error;
    }
    this.store.set(key, current + points);
  }
  async delete(key) {
    this.store.delete(key);
  }
  async reward(key, points = 1) {
    const current = this.store.get(key) || 0;
    const next = Math.max(0, current - points);
    if (next === 0) {
      this.store.delete(key);
    } else {
      this.store.set(key, next);
    }
  }
}

class RateLimiterRedis extends RateLimiterMemory {}

module.exports = {
  RateLimiterMemory,
  RateLimiterRedis,
};
